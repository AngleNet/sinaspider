#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from services import scheduler_service
from services.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  RetStatus register_downloader(string name)')
    print('  RetStatus unregister_downloader(string name)')
    print('  UserIdentity request_user_identity(string name)')
    print('  RetStatus resign_user_identity(UserIdentity pair, string name)')
    print('   grab_links(Integer size)')
    print('  RetStatus submit_links( links)')
    print('   grab_topic_links(Integer size)')
    print('  RetStatus submit_topic_links( links)')
    print('  ProxyAddress request_proxy(string name)')
    print('   request_proxies(string name, Integer size)')
    print('  RetStatus resign_proxy(ProxyAddress addr, string name)')
    print('  RetStatus submit_proxies( addrs)')
    print('  Cookie request_cookie(string name)')
    print('  RetStatus submit_cookies( cookies)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = scheduler_service.Client(protocol)
transport.open()

if cmd == 'register_downloader':
    if len(args) != 1:
        print('register_downloader requires 1 args')
        sys.exit(1)
    pp.pprint(client.register_downloader(args[0],))

elif cmd == 'unregister_downloader':
    if len(args) != 1:
        print('unregister_downloader requires 1 args')
        sys.exit(1)
    pp.pprint(client.unregister_downloader(args[0],))

elif cmd == 'request_user_identity':
    if len(args) != 1:
        print('request_user_identity requires 1 args')
        sys.exit(1)
    pp.pprint(client.request_user_identity(args[0],))

elif cmd == 'resign_user_identity':
    if len(args) != 2:
        print('resign_user_identity requires 2 args')
        sys.exit(1)
    pp.pprint(client.resign_user_identity(eval(args[0]), args[1],))

elif cmd == 'grab_links':
    if len(args) != 1:
        print('grab_links requires 1 args')
        sys.exit(1)
    pp.pprint(client.grab_links(eval(args[0]),))

elif cmd == 'submit_links':
    if len(args) != 1:
        print('submit_links requires 1 args')
        sys.exit(1)
    pp.pprint(client.submit_links(eval(args[0]),))

elif cmd == 'grab_topic_links':
    if len(args) != 1:
        print('grab_topic_links requires 1 args')
        sys.exit(1)
    pp.pprint(client.grab_topic_links(eval(args[0]),))

elif cmd == 'submit_topic_links':
    if len(args) != 1:
        print('submit_topic_links requires 1 args')
        sys.exit(1)
    pp.pprint(client.submit_topic_links(eval(args[0]),))

elif cmd == 'request_proxy':
    if len(args) != 1:
        print('request_proxy requires 1 args')
        sys.exit(1)
    pp.pprint(client.request_proxy(args[0],))

elif cmd == 'request_proxies':
    if len(args) != 2:
        print('request_proxies requires 2 args')
        sys.exit(1)
    pp.pprint(client.request_proxies(args[0], eval(args[1]),))

elif cmd == 'resign_proxy':
    if len(args) != 2:
        print('resign_proxy requires 2 args')
        sys.exit(1)
    pp.pprint(client.resign_proxy(eval(args[0]), args[1],))

elif cmd == 'submit_proxies':
    if len(args) != 1:
        print('submit_proxies requires 1 args')
        sys.exit(1)
    pp.pprint(client.submit_proxies(eval(args[0]),))

elif cmd == 'request_cookie':
    if len(args) != 1:
        print('request_cookie requires 1 args')
        sys.exit(1)
    pp.pprint(client.request_cookie(args[0],))

elif cmd == 'submit_cookies':
    if len(args) != 1:
        print('submit_cookies requires 1 args')
        sys.exit(1)
    pp.pprint(client.submit_cookies(eval(args[0]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
